2024.09.30.
2. useReducer 사용
useState의 함수형 업데이트 대신, useReducer를 사용해도 onToggle과 onRemove가 계속 
새로워지는 문제를 해결할 수 있다.
function reducer(state, action){
   return{...} // 불변성을 지키면서 업데이트한 새로운 상태를 반환한다.
}
액션 값은 주로 (Increment)
{  // 객체로 
   type:’INCREMENT’,
   // 다른 값들이 필요하다면 추가로 들어감
}

function todoReducer(todos, action){
  switch(action.type){ // {TodoListItem에서 onRemove되면 type:REMOVE, 1}
   case 'INSERT' : // 새로 추가
   // {type: 'INSERT', todo:{id:1, text:'todo, checked:false}}
   return todos.concat(action.todo);
   case 'REMOVE' : // 제거
   // {type: 'REMOVE', id:1}
   return todos.filter(todo => todo.id !== action.id);
   case 'TOGGLE' : // 토글
     // {type: 'REMOVE', id:1}

  return todos.map(todo => 
   todo.id === action.id ? {...todo, checked: !todo.checked} : todo);
   default: return todos;
  }}

function App() {
 const[todos, setTodos] = useState(createBulkTodos);

 const[todos,dispatch]=useReducer(todoReducer,undefined,createBulkTodos);
  // dispatch : 액션객체 부르는 함수
  // createBulkTodos : 초기 렌더링 할 때 가져야하는 초기화 할 함수
  // 3번째 파라미터에 초기 상태를 만들어주는 함수 넣으면 
  // 컴포넌트가 맨 처음 렌더링 될 때만 createBulkTodos가 호출 -> 좀 더 안전성
  // undefined는 createBulkTodos가 들어가야하는 공간 -> todos 객체 생성 
 const nextId = useRef(2501);
  // useRef : 1. 돔접근 , 2. 계속 사용할 변수
const onInsert = useCallback(
   (text) => { // 외부에 있는 text 내부에 넣기위해
    const todo = {
    id: nextId.current, // useRef를 쓰려면 current써야함
    text, // 외부에 있는 text 내부로 받음
    checked: false,
    };
    // todo = {id:4, 할일, checked:false} -> todo에 저장
    setTodos(todos=>todos.concat(todo)-> dispatch({type:'INSERT',todo});

const onRemove = useCallback(
    dispatch({type: 'REMOVE', id}) ... )

const onToggle = useCallback(

액션타입
    dispatch({type: 'TOGGLE', id}) ... )

...spread연산자 주의사항
const todos =[{id:1, checked : true}, {id:2, checked:true}];
const nextTodos = [...todos]; // ...은 배열 객체를 복사할 때 얕은 복사를 함
// 내부의 값이 완전히 새로 복사x, 가장 바깥쪽에 있는 값만 복사

nextTodos[0].checked = false;
console.log(nextTodos[0]); // nextTodos.checked: false 
console.log(todos[0]); // Todos.checked: false
console.log(todos[0] === nextTodos[0]); // 타입하고 값이 같니? 결과 : true

nextTodos[0] = {
  ...nextTodos[0],
  checked:true // checked : false -> true
};
console.log(nextTodos[0]); // nextTodos.checked : true
console.log(todos[0] === nextTodos[0]);//todos.checked :false 결과 : false
결과값 : true, {checked: false ,id: 1}, {checked: false ,id: 1}, false

...을 쓰면서 겉에만 복사하지 말고 이렇게 내부에 들어가서 상세하게 복사해야함
결론： ...을 쓰지말고 map써라
업데이트: map, 제거: filter, 삽입 : concat

-------------------------------------------------------------------------------------------------------

useMemo는 업데이트 하지 않으면 렌더링 하지 말아라
export default React.momo(TodoList);

ToListItem을 감싸고 있는 TodoList에도 감싸야 완벽
여기까지 리렌더링 최적화 끝

-------------------------------------------------------------------------------------------------------

스크롤 밑으로 내리면 리렌더링 
스크롤 바를 할 일9 이상 높이 내리면 렌더링 돼라


## react-vituallized : 렌더링 최적화

현재 컴포넌트가 맨 처음 렌더링 될 때 2500개 중 2491개 컴포넌트는 스크롤 하기 전에 
보이지 않는데 렌더링이 이루어짐 -> 비효율적
나중에 todos 배열에 변동이 생길때도 TodoList 컴포넌트 내부의 map함수의 배열의 처음부
터 끝까지 컴포넌트로 변환하는데 이 중 2491개는 렌더링 필요x

react-vituallized 라이브러리 : 리스트 컴포넌트에서 스크롤 되기 전에 보이지 않는 컴포넌트
는 렌더링x 크기만 차지o, 스크롤 되면 해당 스크롤 위치에서 보여줘야 할 컴포넌트를 자연
스럽게 렌더링함 -> 효율적         $ yarn add react-virtualized 다운

각 항목의 크기를 가로 512px, 각 세로57px, TodoList 가로 : 512px, 높이 : 513px
첫 번째 항목은 테두리가 없어서 56px;
import { List } from 'react-virtualized';

const TodoList = ({ todos, onRemove, onToggle }) => {
  const rowRenderer = useCallback(
   ({ index, key, style }) => { // rowRenderer 할 때 꼭 필요함(규칙임)
    const todo = todos[index]; // 0~2499 인덱스 가져옴
    return (
      // todo = {id: 1, text: 할 일 1, checked: false}, 인덱스0
     <TodoListItem todo={todo} key={key} 
     onRemove={onRemove} onToggle={onToggle} style={style} />
    );}, [onRemove, onToggle, todos],);

  return (
   <List className="TodoList" 
   width={512} // 전체 크기
   height={513} //전체 높이
   rowCount={todos.length} // 항목 개수
   rowHeight={57} // 항목 높이 
   rowRenderer={rowRenderer} // 항목 렌더링 할 때 쓰는 함수
   List={todos} // 리스트에 반영하는 객체 이름
   style={{outLine:'none'}}/> // List 컴포넌트에 기본 적용되는 outline 제거
  );};
export default React.memo(TodoList);
const TodoListItem = ({todo, onRemove, onToggle, style}) => { // style추가
  const {id, text, checked} = todo;
  return (
    /* 감싸야해서 virtualized 맨 위에다 써야함 */
   <div className='TodoListItem-virtualized' style={style}> // 추가
이런 라이브러리 써서 프로젝트에 적용

immer 라이브러리

-------------------------------------------------------------------------------------------------------

SPA(single page application) : 하나의 페이지로 이루어진 애플리케이션

리액트 같은 라이브러리를 사용해서 뷰(보이는화면) 렌더링을 사용자의 브라우저가 담당하
도록 하고 우선 웹 애플리케이션을 브라우저에 불러와서 실행시킨 후 사용자와의 인터랙션
이 발생하면 필요한 부분만 자바스크립트를 사용하여 업데이트하는 방식을 사용하게 된다.
만약 새로운 데이터가 필요하다면 서버 API를 호출하여 필요한 데이터만 새로 불러와 애플
리케이션에서 사용할 수 있게 된다.

-> 결론：HTML은 한 번만 받아와서 웹 애플리케이션 실행 후 필요한 데이터만 받아서 화
면에 업데이트 하는 것이 SPA다. SPA는 기술적으로 한 페이지만 존재 사용자가 경험하기엔
여러 페이지가 존재하는 것처럼 느낄 수 있다.

리액트 라우터 같은 라이팅 시스템은 브라우저 주소창의 경로에 따라 페이지를 보여준 이후
링크를 눌러서 다른 페이지로 이동할 때 서버의 다른 페이지의 html을 새로 요청하는 것이
아니라 브라우저의 history API를 사용하여 브라우저의 주소창 값만 변경하고 기존 페이지
에서 띄웠던 웹 애플리케이션을 그대로 유지하면서 라우팅 설정에 따라 또다른 페이지를 
보여준다.

URL 파라미터와 쿼리스트링
페이지의 주소를 정의할 때, 유동적인 값을 사용해야 할 때

URL 파라미터 : 데이터 조회하는 페이지
쿼리스트링 : 키워드검색, 페이지네이션, 정렬방식 등 데이터 조회에 필요한 옵션 전달,
주소의 뒷부분에 ?문자열 key=value로 값 정의 &조건

URL 파라미터 예시 : /profile/variable : 조회
쿼리스트링 예시(검색하는 사이트의 대부분) : /articles?page=1&keyword=react
key=page, value=1, keyword=react인 것 검색

index.js
<BrowserRouter><App /></BrowserRouter> -> app을 BrowserRouter로 감 쌈

App.js
function App() {
  return (
   <Routes>
    {/* locoalhost:3000로 주소가 입력되면 Home 보여라 */}
    <Route path='/' element={<Home/>}/>
    {/* locoalhost: 3000/about */}
    <Route path='/about' element={<About/>}/>
    <Route path='/profiles/:username' element={<Profile/>}/>
    {/* : 뒤에 username은 변수 -> 변동이 가능한 주소 */}
   </Routes>
  );
};

const Home = () => {
  return (
   <div>
    <h1>Home</h1>
    <p>가장 먼저 보여지는 페이지</p>
    {/* locoalhost: 3000/about */}
    <ul>
     <li><Link to={"/about"}>소개</Link></li>
     <li><Link to={"/profiles/juho"}>주호의 프로필</Link></li>
     <li><Link to={"/profiles/miju"}>미주의 프로필</Link></li>
     <li><Link to={"/profiles/void"}>존재하지 않는 프로필</Link></li>
    </ul>
   </div>
  );
};

About.js
const About = () => {

const location = useLocation(); 
// useLocation : 검색창, location: 파라미터 ex)about
   return (
     <div>
       <h1>소개합니다</h1>
       <p>리액트 라우터를 사용해보는 프로젝트</p>
	<p>쿼리스트링: {location.search}</p>
     </div>
   );
};

Profile.js
const data = {
   juho: {name: '주호', description: '프론트엔드',},
   miju: {name: '미주', description: '백엔드',}
}

const Profile = () => {

data객체에 void 없어서
false-> 존재 x 프로필 나옴
   const params = useParams(); // useParams로 주소값 인식

username에
juho, mijo 들어감
   const profile = data[params.username]; 
   // data객체의 키 값으로 인식
   // profile에 주호 객체 담김
   return (
     <div>
       <h1>사용자 프로필</h1>
       {profile ? ( // profile에 값 있으면 true : name, decription 출력
         <div>
           <h2>{profile.name}</h2>
           <p>{profile.description}</p>
         </div>
       ) : (
         <p>존재하지 않는 프로필입니다</p>
       )}
     </div>
   );
};

-----------------------------------------------------------------------------------------------

useLocation 객체
pathname : 현재 주소의 경로(쿼리스트링 제외)

search : 맨앞의 ? 문자를 포함한 쿼리스트링 값

hash : 주소의 # 문자열 뒤의 값(주로 History API가 지원되지 않는 구형 브라우저에서
      클라이언트 라우팅 사용할 때 쓰는 해시 라우터에서 사용

state : 페이지로 이동할 때 임의로 넣을 수 있는 상태 값

key : location 객체의 고유값, 초기에는 default이며 페이지가 변경될 때 마다 고유의 값이
     생성

-------------------------------------------------------------------------------------------------------

?q=가을&imgurl=값
위 문자열에서 ? 지우고 & 문자열로 분리한 뒤 key와 value를 파싱(구문 분석) 해야 함
-> useSearchParams훅 : ? 지우고 & 분리하고 파싱함

http://localhost:3000/about?mode=1&detail=true
const About = () => {
   const [searchParams, setSearchParams] = useSearchParams();
   const detail = searchParams.get('detail');
   const mode = searchParams.get('mode');

   const onToggleDetail = () =>{
     setSearchParams({mode, delete: detail ==='true' ? false : true});};
     // mode는 그대로

   const onIncreaseMode = () =>{
     const nextMode = mode === null ? 1: parseInt(mode) + 1;
     setSearchParams({mode: nextMode, detail});}

return (
     <div>
       <h1>소개합니다</h1>
       <p>리액트 라우터를 사용해보는 프로젝트</p>
       <p>detail: {detail}</p>
       <p>mode: {mode}</p>
       <button onClick = {onToggleDetail}>Toggle detail</button>
       <button onClick = {onIncreaseMode}>mode +1</button>
     </div>
   );};

-------------------------------------------------------------------------

function App() {
     ...
    <Route path='/articles' element={<Articles/>}>
        <Route path=':id' element={<Article/>}/> // 자식으로 넣으면 중복x
    </Route>

const Articles = () => {
   return (
      <> 
      {/* // 아무 태그 상관x */}
     <Outlet/> // <Route path='/articles/:id' element={<Article/>}/>
               // 자식으로 해당되는 컴포넌트를 사용할 때 Outlet
     <ul>
       <li><Link to="/articles/1">게시글1</Link>/li>
       <li><Link to="/articles/2">게시글2</Link></li>
       <li><Link to="/articles/3">게시글3</Link></li>
     /ul>
     </>
   );
};

const Article = () => {
   const {id} = useParams();
   return (
     <div>
       <h2>게시글{id}</h2>
     </div>
   );
};

const Home = () => {
    ...
    <li><Link to={"/articles"}>게시글 목록</Link></li>  // 추가
}
li>  // 추가
}
