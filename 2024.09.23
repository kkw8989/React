2024.09.23.

reactjs code snippets : 리액트 컴포넌트 및 라이프사이클 함수를 작성할 때 단축 단어를 사용하여 간편하게 코드를 자동으로 생성해 낼 수 있는 코드 스니펫 모음.
prettier-code formatter : 코드 스타일을 자동으로 정리해주는 도구
yarn create react-app hello-react


import './App.css';

function App() {
  const name="react";
  return (
    <div>
      <h1>{name} 안녕</h1>
      <h2>잘 작동하니?</h2>
    </div>
  );
}
export default App;

-----------------------------------------------------------------------------

let a;
console.log(Boolean(a));
console.log(typeof a);

-----------------------------------------------------------------------------

function App() {
  const name = '리액트';
  // 객체
  const style = {
    backgroundColor: 'black',   // background-color:
    color: 'aqua',
    fontSize: '48px',           // font-size
    fontWeight: 'bold',         // font-weight
    padding: 16,      // 값을 입력안할시 기본단위는 px
  };
  return <div style={style}>{name}</div>;
}

export default App;

-----------------------------------------------------------------------------

import './App.css';

function App() {
  const name="";  // 문자 초기화
  const number=0; //숫자 초기화
  const bool = false; // 불리언 초기화 
  return (
    <div>
      {/* &&:참이면 실행  */}
      {name && <h1>리액트맞니?</h1>}
      {number && <h1>리액트입니다</h1>}
      {bool || <h1>리액트입니다</h1>}
    </div>
  );
}

export default App;

-----------------------------------------------------------------------------

react{
  background: black;
  color : aqua;
  font-size: 48px;
  font-weight: bold;
  padding: 16px;
}

-----------------------------------------------------------------------------

import './App.css';

function App() {
  const name = '리액트';
  return <div className='react'>{name}</div>;
}

export default App;

-----------------------------------------------------------------------------

.prettierrc

-----------------------------------------------------------------------------

{
  "singleQuote": true,
  "semi": true,
  "useTabs": false,
  "tabWidth": 2
}

-----------------------------------------------------------------------------

import "./App.css";
import React, { Component } from "react";

class App extends Component {
  render() {
    const name = "리액트";
    return <div className="react">{name}</div>;
  }
}
export default App;

-----------------------------------------------------------------------------

function Dog(name){
  this.name =name;
}

Dog.prototype.say = function(){
  console.log(this.name + ' : 멍멍');
}

const dog = new Dog('흰둥이');
dog.say();

-----------------------------------------------------------------------------

class Dog{
  constructor(name){
    this.name = name;
  }
  say(){
    console.log(this.name + ' : 멍멍');
  }
}

const dog = new Dog('흰둥이');
dog.say();

-----------------------------------------------------------------------------

MyComponent.jsrsc
화살표함수 컴포넌트 생성 

-----------------------------------------------------------------------------

function BlackDog(){
  this.name = '흰둥이';
  return {
    name:'검둥이',
    bark:function(){
      console.log(this.name + ' : 멍멍');
    }
  }
}

const blackDog = new BlackDog();
blackDog.bark();

-----------------------------------------------------------------------------

import React from "react";

const MyComponent = (props) => {
  return <div>{props.name}나의 첫 컴포넌트</div>;
};

MyComponent.defaultProps = {
    name: '기본이름',
  };

export default MyComponent;

-----------------------------------------------------------------------------

// 디스트럭처링(destructuring_파괴하는~)
 배열의 값 또는 객체의 속성을 풀어서 별개의 변수로 쓸 수 있게 해주는 자바스크립트 문법

-----------------------------------------------------------------------------

//es5
var person={
  first:"hyeri",
  last:"yoon",
};

var first=person.first;      //객체 person이 불필요하게 반복
var last=person.last;


//es6  객체 비구조화 할당문
const person={
  first:"hyeri",
  last:"yoon",
};
const {first,last}=person;   

-----------------------------------------------------------------------------


import React from "react";

const MyComponent = (props) => {

    const {name, children} = props;

  return (
    <div>
      {name}나의 첫 컴포넌트
      <br />
      자식의 값은 {children}
    </div>
  );
};

MyComponent.defaultProps = {
  name: "기본이름",
};

export default MyComponent;

-----------------------------------------------------------------------------

import React from "react";
import PropTypes from 'prop-types';

const MyComponent = ({ name, children, age }) => {
  return (
    <div>
      {name}나의 첫 컴포넌트
      <br />
      자식의 값은 {children}
      <br />내 나이는 {age}
    </div>
  );
};

MyComponent.propTypes = {
    name:PropTypes.string
};

MyComponent.defaultProps = {
  name: "기본이름",
};

export default MyComponent;

-----------------------------------------------------------------------------

import React from "react";
import MyComponent from "./MyComponent";

const App = () => {
  return (
    <div>
      <MyComponent name={3} age="30">
        리액트
      </MyComponent>
    </div>
  );
};

export default App;
